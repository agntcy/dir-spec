



Independent Submission                                    L. Muscariello
Internet-Draft                                                  R. Polic
Intended status: Informational                                     Cisco
Expires: 9 February 2026                                   8 August 2025


                        Agent Directory Service
                        draft-agntcy-ads-latest

Abstract

   The Agent Directory Service (ADS) is a distributed directory service
   designed to store metadata for AI agent applications.  This metadata,
   stored as directory records, enables the discovery of agent
   applications with specific skills for solving various problems.  The
   implementation features distributed directories that interconnect
   through a content-routing protocol.

About This Document

   This note is to be removed before publishing as an RFC.

   The latest revision of this draft can be found at
   https://spec.dir.agncty.org.  Status information for this document
   may be found at https://datatracker.ietf.org/doc/draft-agntcy-ads/.

   Source for this draft and an issue tracker can be found at
   https://github.com/agntcy/dir.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 9 February 2026.

Copyright Notice

   Copyright (c) 2025 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.

Table of Contents

   1.  Conventions and Definitions
   2.  Introduction
     2.1.  Core Capabilities
     2.2.  Architectural Foundation
   3.  Storage Architecture
     3.1.  Content-Addressed Storage
     3.2.  ORAS Integration
       3.2.1.  Standards Compliance
       3.2.2.  Artifact Organization
       3.2.3.  Multi-Registry Federation
     3.3.  Decentralized Indexing
       3.3.1.  Content Index Structure
       3.3.2.  Distributed Hash Table Integration
     3.4.  Security Model
       3.4.1.  Cryptographic Integrity
       3.4.2.  Access Control
       3.4.3.  Trust Boundaries
     3.5.  Performance Optimizations
       3.5.1.  Caching Strategy
       3.5.2.  Bandwidth Optimization
       3.5.3.  Scalability Architecture
   4.  Content Routing
     4.1.  Capability Announcement
     4.2.  Discovery Process
   5.  IANA Considerations
   6.  References
     6.1.  Normative References
     6.2.  Informative References
   Authors' Addresses

1.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

2.  Introduction

   Multi-Agent Systems (MAS) represent a new paradigm in distributed
   computing where software components leverage Large Language Models
   (LLMs) to perform specialized tasks and solve complex problems
   through collaborative intelligence.  These systems combine LLMs with
   contextual knowledge and tool-calling capabilities, often abstracted
   through Model Context Protocol (MCP) servers, enabling dynamic
   workflows that adapt based on stored state and environmental
   conditions.

   The diversity and complexity of MAS architectures present unique
   challenges for discovery and composition.  As the ecosystem of AI
   agents expands, developers need efficient mechanisms to:

   *  *Discover compatible agents* with specific skills and capabilities

   *  *Evaluate performance characteristics* including cost, latency,
      and resource requirements

   *  *Compose multi-agent workflows* by linking agents with
      complementary capabilities

   *  *Verify claims* about agent performance and reliability

   *  *Track versioning and dependencies* between agent components

   The Agent Directory Service (ADS) addresses these challenges by
   providing a distributed directory infrastructure specifically
   designed for the agentic AI ecosystem.  Rather than attempting to
   formally define MAS architectures, which would constrain the creative
   composition patterns emerging in this rapidly evolving field—ADS
   focuses on providing flexible metadata storage and discovery
   mechanisms.

2.1.  Core Capabilities

   ADS enables several key capabilities for the agentic AI ecosystem:

   *Capability-Based Discovery*: Agents publish structured metadata
   describing their functional abilities, costs, and performance
   characteristics.  The system organizes this information using
   hierarchical skill taxonomies, enabling efficient matching of
   capabilities to requirements.

   *Verifiable Claims*: While agent capabilities are often subjectively
   evaluated, ADS provides cryptographic mechanisms for data integrity
   and provenance tracking.  This allows users to make informed
   decisions about agent selection while enabling reputation systems to
   emerge organically.

   *Semantic Linkage*: Components can be securely linked to create
   various relationships like version histories for evolutionary
   development, collaborative partnerships where complementary skills
   solve complex problems, and dependency chains for composite agent
   workflows.

   *Distributed Architecture*: Built on proven distributed systems
   principles, ADS uses content-addressing for global uniqueness and
   implements distributed hash tables (DHT) for scalable content
   discovery across decentralized networks.

2.2.  Architectural Foundation

   The system leverages the Open Agentic Schema Framework (OASF) to
   model agent information in a structured, extensible format.  OASF
   enables rich queries such as "What agents can solve problem A?" or
   "What combination of skills and costs optimizes for task B?"  This
   schema-driven approach supports both objective metrics (token
   consumption, GPU requirements) and subjective evaluations (user
   ratings, task completion quality).

   Agent records are organized using modular extensions—reusable
   components like MCP server definitions, prompt-based agents, and
   evaluation metrics.  This modular approach facilitates composition
   and reuse across different MAS architectures while maintaining
   flexibility for innovative use cases.

   The underlying storage layer integrates with OCI (Open Container
   Initiative) standards, enabling interoperability with existing
   container ecosystems and leveraging mature tooling for content
   distribution and verification.

   This document details the technical architecture of ADS, covering the
   record storage layer, security model, distributed data discovery
   mechanisms, and data distribution protocols between storage nodes.

3.  Storage Architecture

   ADS implements a decentralized storage architecture built on OCI
   (Open Container Initiative) registries using ORAS (OCI Registry as
   Storage) as the foundational object storage layer.  This design
   choice enables the system to leverage mature, standardized container
   registry infrastructure while achieving the speed, scalability, and
   security requirements of a distributed agent directory.

3.1.  Content-Addressed Storage

   The storage architecture centers on globally unique Content
   Identifiers (CID) that provide several critical properties for a
   distributed agent directory:

   *Immutability*: Content identifiers are cryptographically derived
   from the data they represent, ensuring that any modification results
   in a different identifier.  This property is essential for
   maintaining data integrity in agent records and enabling verifiable
   claims about agent capabilities.

   *Deduplication*: Identical content automatically receives the same
   identifier across all nodes in the network, eliminating storage
   redundancy and reducing bandwidth requirements when the same agent
   components are referenced by multiple systems.

   *Verifiability*: Any node can independently verify that received
   content matches its identifier, providing built-in protection against
   data corruption or tampering during transmission.

   *Location Independence*: Content can be retrieved from any node that
   possesses it, as the identifier serves as a universal pointer that
   abstracts away physical storage locations.

3.2.  ORAS Integration

   ORAS provides a standardized interface for treating OCI registries as
   general-purpose object storage, offering several advantages for ADS:

3.2.1.  Standards Compliance

   By building on OCI specifications, ADS inherits compatibility with
   the extensive ecosystem of container registry tools, security
   scanners, and management platforms.  This includes:

   *  *Authentication and authorization* mechanisms already deployed in
      enterprise environments

   *  *Content signing and verification* through tools like Notary and
      cosign

   *  *Vulnerability scanning* capabilities that can be extended to
      agent security assessments

   *  *Content delivery networks* optimized for OCI artifact
      distribution

3.2.2.  Artifact Organization

   Agent records are stored as OCI artifacts with a structured
   organization.  Multiple records can be stored under the same OCI name
   and tag, with each record uniquely identified by its content-
   addressed SHA256 digest:

   registry.example.com/agents/ ├── skills/ │ ├── nlp/sentiment-
   analysis:v1.0.0@sha256:abc123...  # BERT-based implementation │ ├──
   nlp/sentiment-analysis:v1.0.0@sha256:def456...  # RoBERTa-based
   implementation │ ├── nlp/sentiment-analysis:v1.0.0@sha256:ghi789...
   # DistilBERT-based implementation │ ├── nlp/text-
   classification:v2.0.0@sha256:abc123... # Same BERT agent, different
   skill │ ├── nlp/emotion-detection:v1.5.0@sha256:abc123...  # Same
   BERT agent, different skill │ ├── vision/object-
   detection:v2.1.0@sha256:jkl012... # YOLO implementation │ ├── vision/
   object-detection:v2.1.0@sha256:mno345... # R-CNN implementation │ ├──
   vision/scene-understanding:v1.0.0@sha256:jkl012... # Same YOLO agent,
   different skill │ └── reasoning/mathematical:v1.5.0@sha256:pqr678...
   ├── evaluations/ │ ├── performance-metrics:latest@sha256:stu901... │
   └── benchmark-results:v1.0.0@sha256:vwx234... └── compositions/ ├──
   security-analyst:v3.0.0@sha256:yza567...  └── research-
   assistant:v2.2.0@sha256:bcd890...

   This naming scheme demonstrates that the same content identifier can
   belong to multiple skills, reflecting the reality that many AI agents
   are multi-capable.  For example, the BERT-based agent
   (sha256:abc123...) appears under multiple skill categories: nlp/
   sentiment-analysis, nlp/text-classification, and nlp/emotion-
   detection, representing different capabilities of the same underlying
   agent implementation.  Similarly, the YOLO vision model
   (sha256:jkl012...) provides both object-detection and scene-
   understanding capabilities.

   This cross-referencing approach allows agents to be discovered
   through any of their supported capabilities while maintaining unique
   addressability through content identifiers.  Each skill category can
   have its own versioning and metadata, enabling fine-grained
   capability management even when multiple skills share the same
   underlying implementation.

   Each artifact contains structured metadata following OASF schemas,
   enabling rich queries and capability matching across all variants
   within a given category.

3.2.3.  Multi-Registry Federation

   The architecture supports federation across multiple registry
   instances, enabling:

   *  *Organizational boundaries*: Different organizations can maintain
      their own registries while participating in the global directory

   *  *Geographic distribution*: Content can be replicated to registries
      closer to consumers, reducing latency

   *  *Specialization*: Registries can focus on specific domains (e.g.,
      medical AI agents, financial analysis tools)

   *  *Redundancy*: Critical agent records can be replicated across
      multiple registries for availability

3.3.  Decentralized Indexing

   While individual records are stored in OCI registries, the system
   maintains decentralized indexes for efficient discovery:

3.3.1.  Content Index Structure

   { "content_id": "sha256:abc123...", "capabilities": ["nlp.sentiment",
   "nlp.translation"], "cost_metrics": { "tokens_per_second": 1000,
   "gpu_memory_mb": 4096 }, "registries": [ "registry.example.com",
   "hub.agents.org" ], "last_updated": "2025-08-07T10:30:00Z" }

3.3.2.  Distributed Hash Table Integration

   ADS uses a DHT overlay network to maintain these indexes across
   participating nodes:

   *  *Consistent hashing* distributes index entries across nodes based
      on content identifiers

   *  *Replication factor* ensures index availability even when nodes
      leave the network

   *  *Eventual consistency* propagates updates across the network while
      maintaining performance

   *  *Query routing* efficiently locates relevant content without
      broadcasting to all nodes

3.4.  Security Model

   The OCI-based architecture provides multiple layers of security:

3.4.1.  Cryptographic Integrity

   *  *Content addressing* ensures tamper detection through
      cryptographic hash verification

   *  *Digital signatures* on artifacts provide authenticity guarantees
      using established PKI infrastructure

   *  *Supply chain security* through integration with software bill of
      materials (SBOM) tools

3.4.2.  Access Control

   *  *Registry-level permissions* control who can publish and retrieve
      agent records

   *  *Fine-grained policies* can restrict access to specific agent
      categories or capability types

   *  *Audit trails* leverage existing registry logging capabilities to
      track access patterns

3.4.3.  Trust Boundaries

   *  *Organizational isolation* through separate registries maintains
      security boundaries

   *  *Content verification* allows nodes to validate artifact integrity
      without trusting transport layers

   *  *Reputation systems* can build on cryptographic proofs of past
      agent performance

3.5.  Performance Optimizations

   The architecture incorporates several optimizations for the specific
   requirements of agent discovery:

3.5.1.  Caching Strategy

   *  *Capability indexes* are cached at edge nodes for sub-second query
      response

   *  *Popular agent records* are automatically replicated to reduce
      retrieval latency

   *  *Negative caching* prevents repeated queries for non-existent
      capabilities

3.5.2.  Bandwidth Optimization

   *  *Incremental updates* use OCI layer semantics to transmit only
      changed portions of agent records

   *  *Content compression* reduces storage and transmission costs for
      large agent definitions

   *  *Selective replication* based on query patterns minimizes
      unnecessary data transfer

3.5.3.  Scalability Architecture

   The system scales horizontally through several mechanisms:

   *  *Registry sharding* distributes storage load across multiple OCI
      registry instances

   *  *Index partitioning* in the DHT allows query load to scale with
      the number of participating nodes

   *  *Lazy loading* defers retrieval of detailed agent specifications
      until actually needed

   This architecture provides a robust foundation for a decentralized
   agent directory that can scale to support the growing ecosystem of AI
   agents while maintaining the security and reliability requirements of
   production systems.

4.  Content Routing

   ADS implements capability-based record discovery through a
   hierarchical skill taxonomy.  This architecture enables:

4.1.  Capability Announcement

   Multi-agent systems publish their capabilities by encoding them as
   skill taxonomies.  Each record contains metadata describing the
   agent's functional abilities.  Skills are structured in a
   hierarchical format for efficient matching.

4.2.  Discovery Process

   The system performs a two-phase discovery operation:

   1.  Matches queried capabilities against the skill taxonomy to
       determine records by their identifier

   2.  Identifies the server nodes storing relevant records.

   ## Distributed Resolution

   Local nodes execute targeted retrievals based on:

   1.  Skill matching results: Evaluates capability requirements.

   2.  Server location information: Determines optimal data sources.

   ADS uses libp2p [Kad-DHT] [DHT] for server and content discovery.

                                +----------------+
                                |    DHT Node    |
                                | Content Index  |
                                +----------------+
                                       ^
                                       |
                      +----------------+-----------------+
                      |                |                |
              +-------v------+  +------v-------+  +-----v--------+
              | Server Node A |  | Server Node B|  | Server Node C|
              |   Content X  |  |   Content Y  |  |   Content Z  |
              +-------+------+  +------+-------+  +------+-------+
                      |               |                  |
                      |        Content Exchange          |
                      +---------------+------------------+
                                     |
                             Content Replication

   Flow:
   1. Servers register content with DHT
   2. DHT maintains content-to-server mappings
   3. Servers query DHT to locate content
   4. DHT returns list of servers hosting content
   5. Servers download content from peers

5.  IANA Considerations

   This document has no IANA actions.

6.  References

6.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC6920]  Farrell, S., Kutscher, D., Dannewitz, C., Ohlman, B.,
              Keranen, A., and P. Hallam-Baker, "Naming Things with
              Hashes", RFC 6920, DOI 10.17487/RFC6920, April 2013,
              <https://www.rfc-editor.org/rfc/rfc6920>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

6.2.  Informative References

   [DHT]      "*** BROKEN REFERENCE ***".

Authors' Addresses

   Luca Muscariello
   Cisco
   Email: lumuscar@cisco.com


   Ramiz Polic
   Cisco
   Email: rpolic@cisco.com
