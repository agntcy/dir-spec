



Independent Submission                                    L. Muscariello
Internet-Draft                                                  R. Polic
Intended status: Informational                                     Cisco
Expires: 8 February 2026                                   7 August 2025


                        Agent Directory Service
                        draft-agntcy-ads-latest

Abstract

   The Agent Directory Service (ADS) is a distributed directory service
   designed to store metadata for AI agent applications.  This metadata,
   stored as directory records, enables the discovery of agent
   applications with specific skills for solving various problems.  The
   implementation features distributed directories that interconnect
   through a content-routing protocol.

About This Document

   This note is to be removed before publishing as an RFC.

   The latest revision of this draft can be found at
   https://spec.dir.agncty.org.  Status information for this document
   may be found at https://datatracker.ietf.org/doc/draft-agntcy-ads/.

   Source for this draft and an issue tracker can be found at
   https://github.com/agntcy/dir.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 8 February 2026.

Copyright Notice

   Copyright (c) 2025 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.

Table of Contents

   1.  Conventions and Definitions
   2.  Introduction
     2.1.  Core Capabilities
     2.2.  Architectural Foundation
   3.  Naming
   4.  Content Routing
     4.1.  Capability Announcement
     4.2.  Discovery Process
     4.3.  Distributed Object Storage
       4.3.1.  Simplified Content Retrieval
       4.3.2.  OCI Integration
   5.  IANA Considerations
   6.  References
     6.1.  Normative References
     6.2.  Informative References
   Authors' Addresses

1.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

2.  Introduction

   Multi-Agent Systems (MAS) represent a new paradigm in distributed
   computing where software components leverage Large Language Models
   (LLMs) to perform specialized tasks and solve complex problems
   through collaborative intelligence.  These systems combine LLMs with
   contextual knowledge and tool-calling capabilities, often abstracted
   through Model Context Protocol (MCP) servers, enabling dynamic
   workflows that adapt based on stored state and environmental
   conditions.

   The diversity and complexity of MAS architectures present unique
   challenges for discovery and composition.  As the ecosystem of AI
   agents expands, developers need efficient mechanisms to:

   *  *Discover compatible agents* with specific skills and capabilities

   *  *Evaluate performance characteristics* including cost, latency,
      and resource requirements

   *  *Compose multi-agent workflows* by linking agents with
      complementary capabilities

   *  *Verify claims* about agent performance and reliability

   *  *Track versioning and dependencies* between agent components

   The Agent Directory Service (ADS) addresses these challenges by
   providing a distributed directory infrastructure specifically
   designed for the agentic AI ecosystem.  Rather than attempting to
   formally define MAS architectures—which would constrain the creative
   composition patterns emerging in this rapidly evolving field—ADS
   focuses on providing flexible metadata storage and discovery
   mechanisms.

2.1.  Core Capabilities

   ADS enables several key capabilities for the agentic AI ecosystem:

   *Capability-Based Discovery*: Agents publish structured metadata
   describing their functional abilities, costs, and performance
   characteristics.  The system organizes this information using
   hierarchical skill taxonomies, enabling efficient matching of
   capabilities to requirements.

   *Verifiable Claims*: While agent capabilities are often subjectively
   evaluated, ADS provides cryptographic mechanisms for data integrity
   and provenance tracking.  This allows users to make informed
   decisions about agent selection while enabling reputation systems to
   emerge organically.

   *Semantic Linkage*: Components can be securely linked to create
   various relationships—version histories for evolutionary development,
   collaborative partnerships where complementary skills solve complex
   problems, and dependency chains for composite agent workflows.

   *Distributed Architecture*: Built on proven distributed systems
   principles, ADS uses content-addressing for global uniqueness and
   implements distributed hash tables (DHT) for scalable content
   discovery across decentralized networks.

2.2.  Architectural Foundation

   The system leverages the Open Agentic Schema Framework (OASF) to
   model agent information in a structured, extensible format.  OASF
   enables rich queries such as "What agents can solve problem A?" or
   "What combination of skills and costs optimizes for task B?"  This
   schema-driven approach supports both objective metrics (token
   consumption, GPU requirements) and subjective evaluations (user
   ratings, task completion quality).

   Agent records are organized using modular extensions—reusable
   components like MCP server definitions, prompt-based agents, and
   evaluation metrics.  This modular approach facilitates composition
   and reuse across different MAS architectures while maintaining
   flexibility for innovative use cases.

   The underlying storage layer integrates with OCI (Open Container
   Initiative) standards, enabling interoperability with existing
   container ecosystems and leveraging mature tooling for content
   distribution and verification.

   This document details the technical architecture of ADS, covering the
   record storage layer, security model, distributed data discovery
   mechanisms, and data distribution protocols between storage nodes.

3.  Naming

   In distributed systems, a reliable and collision-resistant naming
   scheme is crucial.  The agent directory uses cryptographic hashes
   [RFC7838] to generate globally unique identifiers for data records.

   ADS leverages OCI as object storage, and therefore identifiers are
   made available as described in [OCI digest].

4.  Content Routing

   ADS implements capability-based record discovery through a
   hierarchical skill taxonomy.  This architecture enables:

4.1.  Capability Announcement

   Multi-agent systems publish their capabilities by encoding them as
   skill taxonomies.  Each record contains metadata describing the
   agent's functional abilities.  Skills are structured in a
   hierarchical format for efficient matching.

4.2.  Discovery Process

   The system performs a two-phase discovery operation:

   1.  Matches queried capabilities against the skill taxonomy to
       determine records by their identifier

   2.  Identifies the server nodes storing relevant records.

   ## Distributed Resolution

   Local nodes execute targeted retrievals based on:

   1.  Skill matching results: Evaluates capability requirements.

   2.  Server location information: Determines optimal data sources.

   ADS uses libp2p [Kad-DHT] [DHT] for server and content discovery.

                                +----------------+
                                |    DHT Node    |
                                | Content Index  |
                                +----------------+
                                       ^
                                       |
                      +----------------+-----------------+
                      |                |                |
              +-------v------+  +------v-------+  +-----v--------+
              | Server Node A |  | Server Node B|  | Server Node C|
              |   Content X  |  |   Content Y  |  |   Content Z  |
              +-------+------+  +------+-------+  +------+-------+
                      |               |                  |
                      |        Content Exchange          |
                      +---------------+------------------+
                                     |
                             Content Replication

   Flow:
   1. Servers register content with DHT
   2. DHT maintains content-to-server mappings
   3. Servers query DHT to locate content
   4. DHT returns list of servers hosting content
   5. Servers download content from peers

4.3.  Distributed Object Storage

   ADS differs from block storage systems like [IPFS] in its approach to
   distributed object storage.

4.3.1.  Simplified Content Retrieval

   1.  ADS directly stores complete records rather than splitting them
       into blocks.

   2.  No special optimizations are needed for retrieving content from
       multiple sources.

   3.  Records are retrieved as complete units using standard OCI
       protocols.

4.3.2.  OCI Integration

   ADS leverages the OCI distribution specification for content storage
   and retrieval:

   1.  Records are stored and transferred using OCI artifacts.

   2.  Any OCI distribution-compliant server can participate in the
       network.

   3.  Servers retrieve records directly from each other using standard
       OCI protocols.

   While ADS uses zot as its reference OCI server implementation, the
   system works with any server that implements the OCI distribution
   specification.

5.  IANA Considerations

   This document has no IANA actions.

6.  References

6.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC6920]  Farrell, S., Kutscher, D., Dannewitz, C., Ohlman, B.,
              Keranen, A., and P. Hallam-Baker, "Naming Things with
              Hashes", RFC 6920, DOI 10.17487/RFC6920, April 2013,
              <https://www.rfc-editor.org/rfc/rfc6920>.

   [RFC7838]  Nottingham, M., McManus, P., and J. Reschke, "HTTP
              Alternative Services", RFC 7838, DOI 10.17487/RFC7838,
              April 2016, <https://www.rfc-editor.org/rfc/rfc7838>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

6.2.  Informative References

   [DHT]      "*** BROKEN REFERENCE ***".

Authors' Addresses

   Luca Muscariello
   Cisco
   Email: lumuscar@cisco.com


   Ramiz Polic
   Cisco
   Email: rpolic@cisco.com
